{"version":3,"file":"2-snackbar.js","sources":["../src/js/2-snackbar.js"],"sourcesContent":["import iziToast from \"izitoast\";\nimport \"izitoast/dist/css/iziToast.min.css\";\n\n/**\n * @class PromiseGenerator\n * @classdesc A class that handles form submission, generates promises based on user input,\n * and displays notifications using iziToast.\n */\nclass PromiseGenerator {\n  /**\n   * @constructor\n   * @param {string} formSelector - The CSS selector for the form element.\n   */\n  constructor(formSelector) {\n    /**\n     * @private\n     * @type {HTMLFormElement}\n     * @description The form element.\n     */\n    this._form = document.querySelector(formSelector);\n\n    if (!this._form) {\n      console.error(`Form with selector \"${formSelector}\" not found.`);\n      return;\n    }\n\n    this._form.addEventListener('submit', this._handleSubmit.bind(this));\n  }\n\n  /**\n   * @private\n   * @method _handleSubmit\n   * @param {Event} event - The submit event object.\n   * @description Handles the form submission, extracts data, generates a promise,\n   * and displays the result using iziToast.\n   */\n  _handleSubmit(event) {\n    event.preventDefault();\n    const formData = new FormData(this._form);\n    const delay = parseInt(formData.get('delay'));\n    const state = formData.get('state');\n\n    const isResolved = state === 'fulfilled';\n    this._generatePromise(isResolved, delay)\n      .then(data => {\n        iziToast.show({\n          title: '✅',\n          message: data,\n          position: 'topRight',\n          color: 'green',\n        });\n      })\n      .catch(error => {\n        iziToast.show({\n          title: '❌',\n          message: error,\n          position: 'topRight',\n          color: 'red',\n        });\n      });\n    this._form.reset();\n  }\n\n  /**\n   * @private\n   * @method _generatePromise\n   * @param {boolean} shouldResolve - Whether the promise should resolve or reject.\n   * @param {number} delay - The delay in milliseconds before the promise settles.\n   * @returns {Promise<string>} A promise that resolves with a success message or rejects with an error message.\n   */\n  _generatePromise(shouldResolve, delay) {\n    const successfulMessage = `Fulfilled promise in ${delay}ms`;\n    const failedMessage = `Rejected promise in ${delay}ms`;\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (shouldResolve) {\n          resolve(successfulMessage);\n        } else {\n          reject(failedMessage);\n        }\n      }, delay);\n    });\n  }\n}\n\n// Initialize the PromiseGenerator with the form selector\nconst promiseGenerator = new PromiseGenerator('form');"],"names":["PromiseGenerator","formSelector","event","formData","delay","isResolved","data","iziToast","error","shouldResolve","successfulMessage","failedMessage","resolve","reject"],"mappings":"oGAQA,MAAMA,CAAiB,CAKrB,YAAYC,EAAc,CAQxB,GAFA,KAAK,MAAQ,SAAS,cAAcA,CAAY,EAE5C,CAAC,KAAK,MAAO,CACf,QAAQ,MAAM,uBAAuBA,CAAY,cAAc,EAC/D,MACD,CAED,KAAK,MAAM,iBAAiB,SAAU,KAAK,cAAc,KAAK,IAAI,CAAC,CACpE,CASD,cAAcC,EAAO,CACnBA,EAAM,eAAc,EACpB,MAAMC,EAAW,IAAI,SAAS,KAAK,KAAK,EAClCC,EAAQ,SAASD,EAAS,IAAI,OAAO,CAAC,EAGtCE,EAFQF,EAAS,IAAI,OAAO,IAEL,YAC7B,KAAK,iBAAiBE,EAAYD,CAAK,EACpC,KAAKE,GAAQ,CACZC,EAAS,KAAK,CACZ,MAAO,IACP,QAASD,EACT,SAAU,WACV,MAAO,OACjB,CAAS,CACT,CAAO,EACA,MAAME,GAAS,CACdD,EAAS,KAAK,CACZ,MAAO,IACP,QAASC,EACT,SAAU,WACV,MAAO,KACjB,CAAS,CACT,CAAO,EACH,KAAK,MAAM,OACZ,CASD,iBAAiBC,EAAeL,EAAO,CACrC,MAAMM,EAAoB,wBAAwBN,CAAK,KACjDO,EAAgB,uBAAuBP,CAAK,KAClD,OAAO,IAAI,QAAQ,CAACQ,EAASC,IAAW,CACtC,WAAW,IAAM,CACXJ,EACFG,EAAQF,CAAiB,EAEzBG,EAAOF,CAAa,CAEvB,EAAEP,CAAK,CACd,CAAK,CACF,CACH,CAGyB,IAAIJ,EAAiB,MAAM"}